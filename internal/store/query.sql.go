// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package store

import (
	"context"
	"database/sql"
)

const addExpense = `-- name: AddExpense :execresult
INSERT INTO expenses (
    trip_id, date, description, amount, paid_by_user_id, participants
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type AddExpenseParams struct {
	TripID       string
	Date         sql.NullTime
	Description  sql.NullString
	Amount       sql.NullFloat64
	PaidByUserID sql.NullString
	Participants []byte
}

func (q *Queries) AddExpense(ctx context.Context, arg AddExpenseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addExpense,
		arg.TripID,
		arg.Date,
		arg.Description,
		arg.Amount,
		arg.PaidByUserID,
		arg.Participants,
	)
}

const addSchedule = `-- name: AddSchedule :execresult
INSERT INTO schedule(
    trip_id, user_id, date
) VALUES (
    ?, ?, ?
)
`

type AddScheduleParams struct {
	TripID string
	UserID string
	Date   sql.NullTime
}

func (q *Queries) AddSchedule(ctx context.Context, arg AddScheduleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSchedule, arg.TripID, arg.UserID, arg.Date)
}

const addUser = `-- name: AddUser :execresult
INSERT INTO users(
    user_id, trip_id, name
) VALUES (
    ?, ?, ?
)
`

type AddUserParams struct {
	UserID string
	TripID string
	Name   sql.NullString
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser, arg.UserID, arg.TripID, arg.Name)
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedule
WHERE trip_id=?
`

func (q *Queries) DeleteSchedule(ctx context.Context, tripID string) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, tripID)
	return err
}

const getSchedule = `-- name: GetSchedule :many
SELECT s.date, s.user_id, u.name
FROM schedule s
	INNER JOIN users u on s.user_id = u.user_id
WHERE s.trip_id=?
`

type GetScheduleRow struct {
	Date   sql.NullTime
	UserID string
	Name   sql.NullString
}

func (q *Queries) GetSchedule(ctx context.Context, tripID string) ([]GetScheduleRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchedule, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduleRow
	for rows.Next() {
		var i GetScheduleRow
		if err := rows.Scan(&i.Date, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrip = `-- name: GetTrip :one
SELECT trip_id, name, start_date, end_date
FROM trips
WHERE trip_id=?
`

func (q *Queries) GetTrip(ctx context.Context, tripID string) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, tripID)
	var i Trip
	err := row.Scan(
		&i.TripID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, name
FROM users
WHERE trip_id=?
`

type GetUsersRow struct {
	UserID string
	Name   sql.NullString
}

func (q *Queries) GetUsers(ctx context.Context, tripID string) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTripDetails = `-- name: SaveTripDetails :execresult
INSERT INTO trips(
    trip_id, name, start_date, end_date
) VALUES (
    ?, ?, ?, ?
) ON CONFLICT(
    trip_id
) DO UPDATE SET
	name=excluded.name,
	start_date=excluded.start_date,
	end_date=excluded.end_date
`

type SaveTripDetailsParams struct {
	TripID    string
	Name      sql.NullString
	StartDate sql.NullTime
	EndDate   sql.NullTime
}

func (q *Queries) SaveTripDetails(ctx context.Context, arg SaveTripDetailsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveTripDetails,
		arg.TripID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
	)
}
