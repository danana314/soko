// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addSchedule = `-- name: AddSchedule :execresult
INSERT INTO schedule(tripId, userId, date)
VALUES (?, ?, ?)
`

type AddScheduleParams struct {
	Tripid sql.NullString
	Userid sql.NullString
	Date   sql.NullTime
}

func (q *Queries) AddSchedule(ctx context.Context, arg AddScheduleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSchedule, arg.Tripid, arg.Userid, arg.Date)
}

const addUser = `-- name: AddUser :execresult
INSERT INTO users(
    userId, tripId, name
) VALUES (
    ?, ?, ?
)
`

type AddUserParams struct {
	Userid string
	Tripid sql.NullString
	Name   sql.NullString
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser, arg.Userid, arg.Tripid, arg.Name)
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedule
WHERE tripId=?
`

func (q *Queries) DeleteSchedule(ctx context.Context, tripid sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, tripid)
	return err
}

const getSchedule = `-- name: GetSchedule :many
SELECT s.date, s.userId, u.name
FROM schedule s
	INNER JOIN users u on s.userId = u.userId
WHERE s.tripId=?
`

type GetScheduleRow struct {
	Date   sql.NullTime
	Userid sql.NullString
	Name   sql.NullString
}

func (q *Queries) GetSchedule(ctx context.Context, tripid sql.NullString) ([]GetScheduleRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchedule, tripid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduleRow
	for rows.Next() {
		var i GetScheduleRow
		if err := rows.Scan(&i.Date, &i.Userid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrip = `-- name: GetTrip :one
SELECT tripId, name, startDate, endDate
FROM trips
WHERE tripId=?
`

func (q *Queries) GetTrip(ctx context.Context, tripid string) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, tripid)
	var i Trip
	err := row.Scan(
		&i.Tripid,
		&i.Name,
		&i.Startdate,
		&i.Enddate,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT userId, name
FROM users
WHERE tripId=?
`

type GetUsersRow struct {
	Userid string
	Name   sql.NullString
}

func (q *Queries) GetUsers(ctx context.Context, tripid sql.NullString) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, tripid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.Userid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTripDetails = `-- name: SaveTripDetails :execresult
INSERT INTO trips(
    tripId, name, startDate, endDate
) VALUES (
    ?, ?, ?, ?
) ON CONFLICT(
    tripId
) DO UPDATE SET
	name=excluded.name,
	startDate=excluded.startDate,
	endDate=excluded.endDate
`

type SaveTripDetailsParams struct {
	Tripid    string
	Name      sql.NullString
	Startdate sql.NullTime
	Enddate   sql.NullTime
}

func (q *Queries) SaveTripDetails(ctx context.Context, arg SaveTripDetailsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveTripDetails,
		arg.Tripid,
		arg.Name,
		arg.Startdate,
		arg.Enddate,
	)
}
